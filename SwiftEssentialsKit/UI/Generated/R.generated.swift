//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj) {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `DatePickers`.
    static let datePickers = _R.storyboard.datePickers()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "DatePickers", bundle: ...)`
    static func datePickers(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.datePickers)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `ic_close`.
    static let ic_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_close", bundle: ..., traitCollection: ...)`
    static func ic_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_close, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `DatePickerDayView`.
    static let datePickerDayView = _R.nib._DatePickerDayView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DatePickerDayView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.datePickerDayView) instead")
    static func datePickerDayView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.datePickerDayView)
    }
    #endif

    static func datePickerDayView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey: Any]? = nil) -> DatePickerDayView? {
      return R.nib.datePickerDayView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DatePickerDayView
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.accessibility` struct is generated, and contains static references to 1 localization keys.
    struct accessibility {
      /// en translation: Close
      ///
      /// Locales: en, es, it
      static let actionClose = Rswift.StringResource(key: "action close", tableName: "Accessibility", bundle: R.hostingBundle, locales: ["en", "es", "it"], comment: nil)

      /// en translation: Close
      ///
      /// Locales: en, es, it
      static func actionClose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("action close", tableName: "Accessibility", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Accessibility", preferredLanguages: preferredLanguages) else {
          return "action close"
        }

        return NSLocalizedString("action close", tableName: "Accessibility", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.datePickerLocalizable` struct is generated, and contains static references to 9 localization keys.
    struct datePickerLocalizable {
      /// en translation: F
      ///
      /// Locales: en, es, it
      static let lblFri = Rswift.StringResource(key: "lbl fri", tableName: "DatePickerLocalizable", bundle: R.hostingBundle, locales: ["en", "es", "it"], comment: nil)
      /// en translation: M
      ///
      /// Locales: en, es, it
      static let lblMon = Rswift.StringResource(key: "lbl mon", tableName: "DatePickerLocalizable", bundle: R.hostingBundle, locales: ["en", "es", "it"], comment: nil)
      /// en translation: Pick a day
      ///
      /// Locales: en, es, it
      static let titleSelectDate = Rswift.StringResource(key: "title select date", tableName: "DatePickerLocalizable", bundle: R.hostingBundle, locales: ["en", "es", "it"], comment: nil)
      /// en translation: S
      ///
      /// Locales: en, es, it
      static let lblSat = Rswift.StringResource(key: "lbl sat", tableName: "DatePickerLocalizable", bundle: R.hostingBundle, locales: ["en", "es", "it"], comment: nil)
      /// en translation: S
      ///
      /// Locales: en, es, it
      static let lblSun = Rswift.StringResource(key: "lbl sun", tableName: "DatePickerLocalizable", bundle: R.hostingBundle, locales: ["en", "es", "it"], comment: nil)
      /// en translation: T
      ///
      /// Locales: en, es, it
      static let lblThu = Rswift.StringResource(key: "lbl thu", tableName: "DatePickerLocalizable", bundle: R.hostingBundle, locales: ["en", "es", "it"], comment: nil)
      /// en translation: T
      ///
      /// Locales: en, es, it
      static let lblTue = Rswift.StringResource(key: "lbl tue", tableName: "DatePickerLocalizable", bundle: R.hostingBundle, locales: ["en", "es", "it"], comment: nil)
      /// en translation: Today
      ///
      /// Locales: en, es, it
      static let lblToday = Rswift.StringResource(key: "lbl today", tableName: "DatePickerLocalizable", bundle: R.hostingBundle, locales: ["en", "es", "it"], comment: nil)
      /// en translation: W
      ///
      /// Locales: en, es, it
      static let lblWed = Rswift.StringResource(key: "lbl wed", tableName: "DatePickerLocalizable", bundle: R.hostingBundle, locales: ["en", "es", "it"], comment: nil)

      /// en translation: F
      ///
      /// Locales: en, es, it
      static func lblFri(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl fri", tableName: "DatePickerLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DatePickerLocalizable", preferredLanguages: preferredLanguages) else {
          return "lbl fri"
        }

        return NSLocalizedString("lbl fri", tableName: "DatePickerLocalizable", bundle: bundle, comment: "")
      }

      /// en translation: M
      ///
      /// Locales: en, es, it
      static func lblMon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl mon", tableName: "DatePickerLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DatePickerLocalizable", preferredLanguages: preferredLanguages) else {
          return "lbl mon"
        }

        return NSLocalizedString("lbl mon", tableName: "DatePickerLocalizable", bundle: bundle, comment: "")
      }

      /// en translation: Pick a day
      ///
      /// Locales: en, es, it
      static func titleSelectDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title select date", tableName: "DatePickerLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DatePickerLocalizable", preferredLanguages: preferredLanguages) else {
          return "title select date"
        }

        return NSLocalizedString("title select date", tableName: "DatePickerLocalizable", bundle: bundle, comment: "")
      }

      /// en translation: S
      ///
      /// Locales: en, es, it
      static func lblSat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl sat", tableName: "DatePickerLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DatePickerLocalizable", preferredLanguages: preferredLanguages) else {
          return "lbl sat"
        }

        return NSLocalizedString("lbl sat", tableName: "DatePickerLocalizable", bundle: bundle, comment: "")
      }

      /// en translation: S
      ///
      /// Locales: en, es, it
      static func lblSun(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl sun", tableName: "DatePickerLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DatePickerLocalizable", preferredLanguages: preferredLanguages) else {
          return "lbl sun"
        }

        return NSLocalizedString("lbl sun", tableName: "DatePickerLocalizable", bundle: bundle, comment: "")
      }

      /// en translation: T
      ///
      /// Locales: en, es, it
      static func lblThu(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl thu", tableName: "DatePickerLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DatePickerLocalizable", preferredLanguages: preferredLanguages) else {
          return "lbl thu"
        }

        return NSLocalizedString("lbl thu", tableName: "DatePickerLocalizable", bundle: bundle, comment: "")
      }

      /// en translation: T
      ///
      /// Locales: en, es, it
      static func lblTue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl tue", tableName: "DatePickerLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DatePickerLocalizable", preferredLanguages: preferredLanguages) else {
          return "lbl tue"
        }

        return NSLocalizedString("lbl tue", tableName: "DatePickerLocalizable", bundle: bundle, comment: "")
      }

      /// en translation: Today
      ///
      /// Locales: en, es, it
      static func lblToday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl today", tableName: "DatePickerLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DatePickerLocalizable", preferredLanguages: preferredLanguages) else {
          return "lbl today"
        }

        return NSLocalizedString("lbl today", tableName: "DatePickerLocalizable", bundle: bundle, comment: "")
      }

      /// en translation: W
      ///
      /// Locales: en, es, it
      static func lblWed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lbl wed", tableName: "DatePickerLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DatePickerLocalizable", preferredLanguages: preferredLanguages) else {
          return "lbl wed"
        }

        return NSLocalizedString("lbl wed", tableName: "DatePickerLocalizable", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.timeAgoLocalizable` struct is generated, and contains static references to 15 localization keys.
    struct timeAgoLocalizable {
      /// en translation: %d days ago
      ///
      /// Locales: en, es, it
      static let nDaysAgo = Rswift.StringResource(key: "n days ago", tableName: "TimeAgoLocalizable", bundle: R.hostingBundle, locales: ["en", "es", "it"], comment: nil)
      /// en translation: %d hours ago
      ///
      /// Locales: en, es, it
      static let nHoursAgo = Rswift.StringResource(key: "n hours ago", tableName: "TimeAgoLocalizable", bundle: R.hostingBundle, locales: ["en", "es", "it"], comment: nil)
      /// en translation: %d minutes ago
      ///
      /// Locales: en, es, it
      static let nMinutesAgo = Rswift.StringResource(key: "n minutes ago", tableName: "TimeAgoLocalizable", bundle: R.hostingBundle, locales: ["en", "es", "it"], comment: nil)
      /// en translation: %d months ago
      ///
      /// Locales: en, es, it
      static let nMonthsAgo = Rswift.StringResource(key: "n months ago", tableName: "TimeAgoLocalizable", bundle: R.hostingBundle, locales: ["en", "es", "it"], comment: nil)
      /// en translation: %d seconds ago
      ///
      /// Locales: en, es, it
      static let nSecondsAgo = Rswift.StringResource(key: "n seconds ago", tableName: "TimeAgoLocalizable", bundle: R.hostingBundle, locales: ["en", "es", "it"], comment: nil)
      /// en translation: %d weeks ago
      ///
      /// Locales: en, es, it
      static let nWeeksAgo = Rswift.StringResource(key: "n weeks ago", tableName: "TimeAgoLocalizable", bundle: R.hostingBundle, locales: ["en", "es", "it"], comment: nil)
      /// en translation: %d years ago
      ///
      /// Locales: en, es, it
      static let nYearsAgo = Rswift.StringResource(key: "n years ago", tableName: "TimeAgoLocalizable", bundle: R.hostingBundle, locales: ["en", "es", "it"], comment: nil)
      /// en translation: A minute ago
      ///
      /// Locales: en, es, it
      static let aMinuteAgo = Rswift.StringResource(key: "a minute ago", tableName: "TimeAgoLocalizable", bundle: R.hostingBundle, locales: ["en", "es", "it"], comment: nil)
      /// en translation: An hour ago
      ///
      /// Locales: en, es, it
      static let anHourAgo = Rswift.StringResource(key: "an hour ago", tableName: "TimeAgoLocalizable", bundle: R.hostingBundle, locales: ["en", "es", "it"], comment: nil)
      /// en translation: Just now
      ///
      /// Locales: en, es, it
      static let justNow = Rswift.StringResource(key: "just now", tableName: "TimeAgoLocalizable", bundle: R.hostingBundle, locales: ["en", "es", "it"], comment: nil)
      /// en translation: Last month
      ///
      /// Locales: en, es, it
      static let lastMonth = Rswift.StringResource(key: "last month", tableName: "TimeAgoLocalizable", bundle: R.hostingBundle, locales: ["en", "es", "it"], comment: nil)
      /// en translation: Last week
      ///
      /// Locales: en, es, it
      static let lastWeek = Rswift.StringResource(key: "last week", tableName: "TimeAgoLocalizable", bundle: R.hostingBundle, locales: ["en", "es", "it"], comment: nil)
      /// en translation: Last year
      ///
      /// Locales: en, es, it
      static let lastYear = Rswift.StringResource(key: "last year", tableName: "TimeAgoLocalizable", bundle: R.hostingBundle, locales: ["en", "es", "it"], comment: nil)
      /// en translation: Never
      ///
      /// Locales: en, es, it
      static let never = Rswift.StringResource(key: "never", tableName: "TimeAgoLocalizable", bundle: R.hostingBundle, locales: ["en", "es", "it"], comment: nil)
      /// en translation: Yesterday
      ///
      /// Locales: en, es, it
      static let yesterday = Rswift.StringResource(key: "yesterday", tableName: "TimeAgoLocalizable", bundle: R.hostingBundle, locales: ["en", "es", "it"], comment: nil)

      /// en translation: %d days ago
      ///
      /// Locales: en, es, it
      static func nDaysAgo(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("n days ago", tableName: "TimeAgoLocalizable", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "TimeAgoLocalizable", preferredLanguages: preferredLanguages) else {
          return "n days ago"
        }

        let format = NSLocalizedString("n days ago", tableName: "TimeAgoLocalizable", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %d hours ago
      ///
      /// Locales: en, es, it
      static func nHoursAgo(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("n hours ago", tableName: "TimeAgoLocalizable", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "TimeAgoLocalizable", preferredLanguages: preferredLanguages) else {
          return "n hours ago"
        }

        let format = NSLocalizedString("n hours ago", tableName: "TimeAgoLocalizable", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %d minutes ago
      ///
      /// Locales: en, es, it
      static func nMinutesAgo(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("n minutes ago", tableName: "TimeAgoLocalizable", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "TimeAgoLocalizable", preferredLanguages: preferredLanguages) else {
          return "n minutes ago"
        }

        let format = NSLocalizedString("n minutes ago", tableName: "TimeAgoLocalizable", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %d months ago
      ///
      /// Locales: en, es, it
      static func nMonthsAgo(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("n months ago", tableName: "TimeAgoLocalizable", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "TimeAgoLocalizable", preferredLanguages: preferredLanguages) else {
          return "n months ago"
        }

        let format = NSLocalizedString("n months ago", tableName: "TimeAgoLocalizable", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %d seconds ago
      ///
      /// Locales: en, es, it
      static func nSecondsAgo(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("n seconds ago", tableName: "TimeAgoLocalizable", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "TimeAgoLocalizable", preferredLanguages: preferredLanguages) else {
          return "n seconds ago"
        }

        let format = NSLocalizedString("n seconds ago", tableName: "TimeAgoLocalizable", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %d weeks ago
      ///
      /// Locales: en, es, it
      static func nWeeksAgo(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("n weeks ago", tableName: "TimeAgoLocalizable", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "TimeAgoLocalizable", preferredLanguages: preferredLanguages) else {
          return "n weeks ago"
        }

        let format = NSLocalizedString("n weeks ago", tableName: "TimeAgoLocalizable", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %d years ago
      ///
      /// Locales: en, es, it
      static func nYearsAgo(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("n years ago", tableName: "TimeAgoLocalizable", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "TimeAgoLocalizable", preferredLanguages: preferredLanguages) else {
          return "n years ago"
        }

        let format = NSLocalizedString("n years ago", tableName: "TimeAgoLocalizable", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: A minute ago
      ///
      /// Locales: en, es, it
      static func aMinuteAgo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a minute ago", tableName: "TimeAgoLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TimeAgoLocalizable", preferredLanguages: preferredLanguages) else {
          return "a minute ago"
        }

        return NSLocalizedString("a minute ago", tableName: "TimeAgoLocalizable", bundle: bundle, comment: "")
      }

      /// en translation: An hour ago
      ///
      /// Locales: en, es, it
      static func anHourAgo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("an hour ago", tableName: "TimeAgoLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TimeAgoLocalizable", preferredLanguages: preferredLanguages) else {
          return "an hour ago"
        }

        return NSLocalizedString("an hour ago", tableName: "TimeAgoLocalizable", bundle: bundle, comment: "")
      }

      /// en translation: Just now
      ///
      /// Locales: en, es, it
      static func justNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("just now", tableName: "TimeAgoLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TimeAgoLocalizable", preferredLanguages: preferredLanguages) else {
          return "just now"
        }

        return NSLocalizedString("just now", tableName: "TimeAgoLocalizable", bundle: bundle, comment: "")
      }

      /// en translation: Last month
      ///
      /// Locales: en, es, it
      static func lastMonth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("last month", tableName: "TimeAgoLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TimeAgoLocalizable", preferredLanguages: preferredLanguages) else {
          return "last month"
        }

        return NSLocalizedString("last month", tableName: "TimeAgoLocalizable", bundle: bundle, comment: "")
      }

      /// en translation: Last week
      ///
      /// Locales: en, es, it
      static func lastWeek(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("last week", tableName: "TimeAgoLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TimeAgoLocalizable", preferredLanguages: preferredLanguages) else {
          return "last week"
        }

        return NSLocalizedString("last week", tableName: "TimeAgoLocalizable", bundle: bundle, comment: "")
      }

      /// en translation: Last year
      ///
      /// Locales: en, es, it
      static func lastYear(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("last year", tableName: "TimeAgoLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TimeAgoLocalizable", preferredLanguages: preferredLanguages) else {
          return "last year"
        }

        return NSLocalizedString("last year", tableName: "TimeAgoLocalizable", bundle: bundle, comment: "")
      }

      /// en translation: Never
      ///
      /// Locales: en, es, it
      static func never(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("never", tableName: "TimeAgoLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TimeAgoLocalizable", preferredLanguages: preferredLanguages) else {
          return "never"
        }

        return NSLocalizedString("never", tableName: "TimeAgoLocalizable", bundle: bundle, comment: "")
      }

      /// en translation: Yesterday
      ///
      /// Locales: en, es, it
      static func yesterday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yesterday", tableName: "TimeAgoLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TimeAgoLocalizable", preferredLanguages: preferredLanguages) else {
          return "yesterday"
        }

        return NSLocalizedString("yesterday", tableName: "TimeAgoLocalizable", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _DatePickerDayView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DatePickerDayView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey: Any]? = nil) -> DatePickerDayView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DatePickerDayView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try datePickers.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct datePickers: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let datePickerControllerId = StoryboardViewControllerResource<DatePickerController>(identifier: "DatePickerControllerId")
      let name = "DatePickers"

      func datePickerControllerId(_: Void = ()) -> DatePickerController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: datePickerControllerId)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.datePickers().datePickerControllerId() == nil { throw Rswift.ValidationError(description: "[R.swift] ViewController with identifier 'datePickerControllerId' could not be loaded from storyboard 'DatePickers' as 'DatePickerController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
